name: Publish to Windows App Store
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: Release version
        required: true
        type: string
      workflow-run-id:
        description: Workflow Run ID
        required: true
        type: string
  workflow_call:
    inputs:
      release-version:
        description: Release version
        required: true
        type: string
      workflow-run-id:
        description: Workflow Run ID
        required: false
        default: ${{ github.run_id }}
        type: string

jobs:
  publish-windows-store:
    name: Publish to Windows app store
    runs-on: windows-2022
    steps:
      - name: Download .appx artifact
        id: download-artifact
        uses: actions/download-artifact@v5
        with:
          name: windows-${{ inputs.release-version }}
          path: dist
          github-token: ${{ github.token }}
          run-id: ${{ inputs.workflow-run-id }}

      - name: Publish to Microsoft Store
        shell: pwsh
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
          APP_ID: ${{ secrets.STORE_APP_ID }}
          APPX_PATH: ${{ steps.download-artifact.outputs.download-path }}
        run: |
          Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted

          Install-Module -Name StoreBroker

          # Debug: Check if environment variables are set
          Write-Host "Tenant ID length: $($env:TENANT_ID.Length)"
          Write-Host "Client ID length: $($env:CLIENT_ID.Length)"
          Write-Host "Client Secret length: $($env:CLIENT_SECRET.Length)"
          Write-Host "App ID length: $($env:APP_ID.Length)"

          $clientSecret = ConvertTo-SecureString $env:CLIENT_SECRET -AsPlainText -Force

          $cred = New-Object System.Management.Automation.PSCredential $env:CLIENT_ID, $clientSecret

          # Test OAuth2 token directly to get better error information
          Write-Host "Testing OAuth2 token request directly..."
          $tokenUrl = "https://login.microsoftonline.com/$env:TENANT_ID/oauth2/v2.0/token"
          $body = @{
            grant_type = "client_credentials"
            client_id = $env:CLIENT_ID
            client_secret = $env:CLIENT_SECRET
            scope = "https://api.store.microsoft.com/.default"
          }
          
          try {
            $response = Invoke-RestMethod -Uri $tokenUrl -Method Post -Body $body -ContentType "application/x-www-form-urlencoded"
            Write-Host "OAuth2 token request successful"
          } catch {
            Write-Host "OAuth2 token request failed: $($_.Exception.Message)"
            if ($_.ErrorDetails.Message) {
              Write-Host "Error details: $($_.ErrorDetails.Message)"
            }
            if ($_.Exception.Response) {
              Write-Host "HTTP Status: $($_.Exception.Response.StatusCode)"
              Write-Host "HTTP Reason: $($_.Exception.Response.ReasonPhrase)"
            }
            throw
          }

          Write-Host "Attempting to authenticate with Microsoft Store..."
          try {
            Set-StoreBrokerAuthentication -TenantId $env:TENANT_ID -Credential $cred -Verbose
            Write-Host "Authentication successful"
          } catch {
            Write-Host "Authentication failed: $($_.Exception.Message)"
            throw
          }

          $submission = New-ApplicationSubmission -AppId $env:APP_ID -Force
          
          echo $submission

          $submission.listings["en-us"].baseListing.releaseNotes = "this is a test submission"
          
          echo $submission

#          $submission = Add-ApplicationPackage -AppId $env:APP_ID -Submission $submission -FilePath $env:APPX_PATH
#
#          $submission = Update-ApplicationSubmission -AppId $env:APP_ID -Submission $submission
