name: Publish to App Store
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: Release version
        required: true
        type: string
      workflow-run-id:
        description: Workflow Run ID
        required: true
        type: string
      platform:
        description: Platform
        required: true
        type: choice
        options:
          - mac
          - windows
          - both

  workflow_call:
    inputs:
      release-version:
        description: Release version
        required: true
        type: string
      workflow-run-id:
        description: Workflow Run ID
        required: false
        default: ${{ github.run_id }}
        type: string
      platform:
        description: mac or windows
        required: true
        type: string

jobs:
  publish-mac-store:
    if: ${{ inputs.platform == 'mac' || inputs.platform == 'both' }}
    name: Publish to Mac app store
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download .pkg artifact
        id: download-artifact
        uses: actions/download-artifact@v5
        with:
          name: mac-${{ inputs.release-version }}
          path: dist
          github-token: ${{ github.token }}
          run-id: ${{ inputs.workflow-run-id }}

      - name: Get PKG path
        id: get-pkg-path
        run: |
          PKG=$(ls dist | head -n1)
          echo "pkg_path=${{ steps.download-artifact.outputs.download-path }}/$PKG" >> $GITHUB_OUTPUT

      - name: Make private key file
        id: make-key-file
        run: |
          KEY="AuthKey_${{ vars.APPSTORE_API_KEY_ID }}.p8"
          cat > "$KEY" <<'EOF'
          ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          EOF
          echo "key_path=$PWD/$KEY" >> "$GITHUB_OUTPUT"
          echo $key_path

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true

      - name: Install fastlane
        run: gem install fastlane

      - name: Publish to Mac store
        env:
          KEY_ID: ${{ vars.APPSTORE_API_KEY_ID }}
          ISSUER_ID: ${{ vars.APPSTORE_ISSUER_ID }}
          PRIVATE_KEY_PATH: ${{ steps.make-key-file.outputs.key_path }}
          PKG_PATH: ${{ steps.get-pkg-path.outputs.pkg_path }}
          RELEASE_NOTES: "Bug fixes and improvements"
        run: bundle exec fastlane release_workbench

  publish-windows-store:
    if: ${{ inputs.platform == 'windows' || inputs.platform == 'both' }}
    name: Publish to Windows app store
    runs-on: windows-2022
    steps:
      - name: Download .appx artifact
        id: download-artifact
        uses: actions/download-artifact@v5
        with:
          name: windows-${{ inputs.release-version }}
          path: dist
          github-token: ${{ github.token }}
          run-id: ${{ inputs.workflow-run-id }}

      - name: Publish to Microsoft Store
        shell: pwsh
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.MICROSOFT_CLIENT_SECRET }}
          APP_ID: ${{ secrets.STORE_APP_ID }}
          APPX_PATH: ${{ steps.download-artifact.outputs.download-path }}
        run: |
          Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted

          Install-Module -Name StoreBroker

          $clientSecret = ConvertTo-SecureString $env:CLIENT_SECRET -AsPlainText -Force

          $cred = New-Object System.Management.Automation.PSCredential $env:CLIENT_ID, $clientSecret

          Set-StoreBrokerAuthentication -TenantId $env:TENANT_ID -Credential $cred

        # 1) Clone current published submission
          $submission = New-ApplicationSubmission -AppId $env:APP_ID -Force
          
          # 2) Edit metadata
          $submission.listings.'en-us'.baseListing.releaseNotes = 'this is a test submission'

        # 3) Upload package (see note about .appxupload below)
          $pkg = Join-Path $env:APPX_PATH 'Dolt-Workbench-win-x64.appx'
          Set-SubmissionPackage -PackagePath $pkg -UploadUrl $submission.fileUploadUrl
          
          # 4) Send updated JSON back to the API
          Set-ApplicationSubmission -AppId $env:APP_ID -UpdatedSubmission $submission
          
          # 5) Commit so it enters certification (and shows up in the UI)
          Complete-ApplicationSubmission -AppId $env:APP_ID -SubmissionId $submission.id
          


#          $submission = Add-ApplicationPackage -AppId $env:APP_ID -Submission $submission -FilePath $env:APPX_PATH
#
#          $submission = Update-ApplicationSubmission -AppId $env:APP_ID -Submission $submission
